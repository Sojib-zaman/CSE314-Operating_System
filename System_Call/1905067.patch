diff --git a/.vscode/c_cpp_properties.json b/.vscode/c_cpp_properties.json
new file mode 100644
index 0000000..a9f5fe1
--- /dev/null
+++ b/.vscode/c_cpp_properties.json
@@ -0,0 +1,16 @@
+{
+    "configurations": [
+        {
+            "name": "Linux",
+            "includePath": [
+                "${workspaceFolder}/**"
+            ],
+            "defines": [],
+            "compilerPath": "/usr/bin/gcc",
+            "cStandard": "c17",
+            "cppStandard": "gnu++14",
+            "intelliSenseMode": "linux-gcc-x64"
+        }
+    ],
+    "version": 4
+}
\ No newline at end of file
diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..9514159
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,7 @@
+{
+    "files.associations": {
+        "riscv.h": "c",
+        "typeinfo": "c",
+        "types.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..0d6f6f9 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_history\
+	$U/_exitfile\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..b514c3d 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,7 +8,9 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
-
+struct syscall_stat;
+//start.c
+void timerhalt(void);
 // bio.c
 void            binit(void);
 struct buf*     bread(uint, uint);
@@ -106,7 +108,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
-
+int             trace(int);
+int             history(int, uint64);
+void            exitfile(void);
 // swtch.S
 void            swtch(struct context*, struct context*);
 
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
index fb31b32..cf30dcd 100644
--- a/kernel/kernelvec.S
+++ b/kernel/kernelvec.S
@@ -97,11 +97,15 @@ timervec:
         # scratch[0,8,16] : register save area.
         # scratch[24] : address of CLINT's MTIMECMP register.
         # scratch[32] : desired interval between interrupts.
-        
+        # scratch[40] : used for timerhalt , here 40 represents 5*8 
         csrrw a0, mscratch, a0
         sd a1, 0(a0)
         sd a2, 8(a0)
         sd a3, 16(a0)
+        
+        # halt if timerhalt has set halt flag to 1
+        ld a1, 40(a0)
+        bne a1, zero, halt
 
         # schedule the next timer interrupt
         # by adding interval to mtimecmp.
@@ -122,3 +126,13 @@ timervec:
         csrrw a0, mscratch, a0
 
         mret
+halt: 
+        # based on qemu's hw/riscv/virt.c:
+        # qemu halts if FINISHER_PASS(=0x5555) is 
+        # written at address *VIRT_TEST(=0x100000L)
+        lui a1, 0x100
+        lui a2, 0x5
+        addi a2, a2, 0x555
+        sw a2, 0(a1)
+spin:
+        j spin
\ No newline at end of file
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..b61bc26 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -5,7 +5,7 @@
 #include "defs.h"
 
 volatile static int started = 0;
-
+extern void init_sp_lock();
 // start() jumps here in supervisor mode on all CPUs.
 void
 main()
@@ -29,6 +29,7 @@ main()
     fileinit();      // file table
     virtio_disk_init(); // emulated hard disk
     userinit();      // first user process
+    init_sp_lock();
     __sync_synchronize();
     started = 1;
   } else {
diff --git a/kernel/printf.c b/kernel/printf.c
index 1a50203..20ee86f 100644
--- a/kernel/printf.c
+++ b/kernel/printf.c
@@ -123,6 +123,7 @@ panic(char *s)
   printf(s);
   printf("\n");
   panicked = 1; // freeze uart output from other CPUs
+  timerhalt(); // calling timerhalt 
   for(;;)
     ;
 }
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..7de6f11 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,12 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "syscall.h"
+
+
+extern struct syscall_stat* returnpointer() ; 
+extern char* getname() ; 
+
 
 struct cpu cpus[NCPU];
 
@@ -78,7 +84,7 @@ mycpu(void)
   return c;
 }
 
-// Return the current struct proc *, or zero if none.
+//* Return the current struct proc *, or zero if none.
 struct proc*
 myproc(void)
 {
@@ -88,6 +94,56 @@ myproc(void)
   pop_off();
   return p;
 }
+int
+trace(int n )
+{
+  struct proc *temp = myproc() ; //> Gives the current proc
+  acquire(&temp->lock) ;
+  temp->syscalltotrack = n ; //? track n'th syscall
+  release(&temp->lock) ; 
+  return 0 ; 
+}
+void 
+exitfile()
+{
+  timerhalt() ; 
+}
+
+int
+history(int n , uint64 hs)
+{
+
+
+struct syscall_stat *historytrack ;
+historytrack=returnpointer() ;
+
+
+struct proc *temp = myproc() ; 
+struct syscall_stat stat ; 
+
+acquire(&temp->lock) ; 
+ 
+
+
+
+char* name = getname(n); 
+
+strncpy(stat.syscall_name,name,strlen(name)) ; 
+stat.syscall_name[strlen(name)]='\0';
+
+stat.count = historytrack[n].count ; 
+stat.accum_time =historytrack[n].accum_time ; 
+
+
+
+
+release(&temp->lock) ;
+ if(copyout(temp->pagetable, hs, (char *)&stat, sizeof(stat)) < 0)
+      return -1;
+    return 0;
+
+}
+
 
 int
 allocpid()
@@ -282,6 +338,18 @@ fork(void)
   int i, pid;
   struct proc *np;
   struct proc *p = myproc();
+  
+  //! EXTRA
+  struct proc *process = myproc();
+  //printf("in fork , me : %d\n" , process->historytrack[5].count) ; 
+  acquire(&process->lock); 
+  if(process->syscalltotrack==process->trapframe->a7)
+       process->arg_cnt=0;
+
+    
+  release(&process->lock);
+   
+  //!
 
   // Allocate process.
   if((np = allocproc()) == 0){
@@ -322,6 +390,7 @@ fork(void)
   np->state = RUNNABLE;
   release(&np->lock);
 
+  np->syscalltotrack = -1 ; //* setting up syscalltrack for newly created process . 
   return pid;
 }
 
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..519839d 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -1,3 +1,4 @@
+#include "kernel/syscall_stat.h"
 // Saved registers for kernel context switches.
 struct context {
   uint64 ra;
@@ -81,6 +82,14 @@ struct trapframe {
 
 enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+
+struct Arguments
+{
+  int data_type; 
+  char *arg1 ; 
+  int arg2 ; 
+  uint64 arg3 ; 
+};
 // Per-process state
 struct proc {
   struct spinlock lock;
@@ -91,6 +100,7 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+ 
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
@@ -104,4 +114,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int syscalltotrack;          //! The syscall I currently want to track
+  int histrack ; 
+  struct Arguments arguments[MAXARG] ;           //! Storing arguments 
+  int arg_cnt;
+ 
 };
diff --git a/kernel/start.c b/kernel/start.c
index e16f18a..18395ed 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -11,7 +11,7 @@ void timerinit();
 __attribute__ ((aligned (16))) char stack0[4096 * NCPU];
 
 // a scratch area per CPU for machine-mode timer interrupts.
-uint64 timer_scratch[NCPU][5];
+uint64 timer_scratch[NCPU][6];
 
 // assembly code in kernelvec.S for machine-mode timer interrupt.
 extern void timervec();
@@ -76,6 +76,7 @@ timerinit()
   uint64 *scratch = &timer_scratch[id][0];
   scratch[3] = CLINT_MTIMECMP(id);
   scratch[4] = interval;
+  scratch[5] = 0 ; // halt flag to signal halt to timervec , currently 0 
   w_mscratch((uint64)scratch);
 
   // set the machine-mode trap handler.
@@ -87,3 +88,8 @@ timerinit()
   // enable machine-mode timer interrupts.
   w_mie(r_mie() | MIE_MTIE);
 }
+
+void timerhalt()
+{
+  timer_scratch[0][5]=1 ; 
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..b604780 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -6,6 +6,15 @@
 #include "proc.h"
 #include "syscall.h"
 #include "defs.h"
+struct syscall_stat historytrack[25] ;
+
+
+struct syscall_stat* returnpointer()
+{
+  return historytrack ; 
+}
+
+
 
 // Fetch the uint64 at addr from the current process.
 int
@@ -27,6 +36,9 @@ fetchstr(uint64 addr, char *buf, int max)
   struct proc *p = myproc();
   if(copyinstr(p->pagetable, buf, addr, max) < 0)
     return -1;
+
+
+  
   return strlen(buf);
 }
 
@@ -56,7 +68,15 @@ argraw(int n)
 void
 argint(int n, int *ip)
 {
-  *ip = argraw(n);
+  *ip = argraw(n); // n'th argument in ip 
+   struct proc *p = myproc() ; 
+   if(p->syscalltotrack == p->trapframe->a7)
+   {
+    // printf("%d\n",*ip) ; 
+    p->arguments[n].data_type=2; // this means n'th argument is an integer , 32 bit 
+    p->arguments[n].arg2=*ip ;
+   }
+
 }
 
 // Retrieve an argument as a pointer.
@@ -66,6 +86,13 @@ void
 argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
+  struct proc *p = myproc() ; 
+   if(p->syscalltotrack == p->trapframe->a7)
+   {
+    //printf("%d\n",*ip) ; 
+    p->arguments[n].data_type=3; // this means n'th argument is a 64 bit addr
+    p->arguments[n].arg3=*ip ;
+   }
 }
 
 // Fetch the nth word-sized system call argument as a null-terminated string.
@@ -75,8 +102,18 @@ int
 argstr(int n, char *buf, int max)
 {
   uint64 addr;
-  argaddr(n, &addr);
-  return fetchstr(addr, buf, max);
+  argaddr(n, &addr); //nth argument er address in addr
+  int retval = fetchstr(addr, buf, max);
+
+  struct proc *p = myproc() ; 
+   if(p->syscalltotrack == p->trapframe->a7)
+   {
+    p->arguments[n].data_type=1; // this means n'th argument is a 64 bit addr
+    p->arguments[n].arg1=buf;
+  // printf("%s", p->arguments[n].arg1);
+   }
+
+   return retval;
 }
 
 // Prototypes for the functions that handle system calls.
@@ -101,7 +138,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
-
+extern uint64 sys_trace(void);
+extern uint64 sys_history(void);
+extern uint64 sys_exitfile(void);
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
@@ -126,19 +165,92 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_history]  sys_history,
+[SYS_exitfile] sys_exitfile,
 };
 
+char* sysname[] = {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_trace]   "trace",
+[SYS_history]   "history",
+};
+char* getname(int id)
+{
+  return sysname[id];
+}
+struct spinlock sp_locks[25] ; 
+void init_sp_lock()
+{
+  for(int i=1 ; i<=23 ; i++)
+  {
+    initlock(&sp_locks[i] ,sysname[i]) ; 
+  }
+}
+
 void
 syscall(void)
 {
   int num;
   struct proc *p = myproc();
 
-  num = p->trapframe->a7;
+  num = p->trapframe->a7; 
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
-    // and store its return value in p->trapframe->a0
-    p->trapframe->a0 = syscalls[num]();
+    // and store its return value in p->trapframe->a0 
+    
+  uint starttime , endtime ; 
+  acquire(&tickslock);
+  starttime = ticks ; 
+  release(&tickslock) ; 
+  p->trapframe->a0 = syscalls[num]();
+  acquire(&tickslock);
+  endtime = ticks ;   
+  release(&tickslock) ; 
+  uint spent_time ; 
+  spent_time = endtime-starttime ; 
+  acquire(&p->lock); //acquiring lock because we accessing pid
+  if(p->syscalltotrack==num)
+    {
+   
+      printf("pid : %d, syscall : %s, args: (",p->pid , sysname[p->syscalltotrack]) ; 
+      for(int i=0 ; i<p->arg_cnt ;i++)
+       {
+        struct Arguments arg = p->arguments[i] ; 
+        if(arg.data_type==1)printf("%s",arg.arg1) ; 
+        else if(arg.data_type==2)printf("%d",arg.arg2) ;
+        else if(arg.data_type==3)printf("%p",arg.arg3) ;
+        if(i!=p->arg_cnt-1)printf(",") ;
+       }
+      printf("), return: %d\n", p->trapframe->a0 );
+    }
+  acquire(&sp_locks[num]) ; 
+  historytrack[num].accum_time+=spent_time;
+  historytrack[num].count++ ; 
+  release(&sp_locks[num]) ; 
+  release(&p->lock);
+
+
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..b92e0b2 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace 22
+#define SYS_history 23
+#define SYS_exitfile 24
diff --git a/kernel/syscall_stat.h b/kernel/syscall_stat.h
new file mode 100644
index 0000000..a8ac7ca
--- /dev/null
+++ b/kernel/syscall_stat.h
@@ -0,0 +1,8 @@
+
+struct syscall_stat
+{
+    
+char syscall_name[16];
+int count;
+int accum_time;
+};
\ No newline at end of file
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 16b668c..64d2528 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -15,6 +15,8 @@
 #include "sleeplock.h"
 #include "file.h"
 #include "fcntl.h"
+#include "syscall.h"
+extern struct syscall_stat* returnpointer() ; 
 
 // Fetch the nth word-sized system call argument as a file descriptor
 // and return both the descriptor and the corresponding struct file.
@@ -56,7 +58,16 @@ sys_dup(void)
 {
   struct file *f;
   int fd;
+  //! EXTRA
+  struct proc *process = myproc();  acquire(&process->lock); 
+  if(process->syscalltotrack==process->trapframe->a7)
+     process->arg_cnt=1;
 
+
+
+   release(&process->lock);
+    
+  //!
   if(argfd(0, 0, &f) < 0)
     return -1;
   if((fd=fdalloc(f)) < 0)
@@ -76,6 +87,16 @@ sys_read(void)
   argint(2, &n);
   if(argfd(0, 0, &f) < 0)
     return -1;
+  
+  //! EXTRA
+  struct proc *process = myproc();
+      acquire(&process->lock); 
+  if(process->syscalltotrack==process->trapframe->a7) process->arg_cnt=3;
+
+
+  release(&process->lock);
+
+  //!
   return fileread(f, p, n);
 }
 
@@ -85,7 +106,17 @@ sys_write(void)
   struct file *f;
   int n;
   uint64 p;
-  
+    //! EXTRA
+  struct proc *process = myproc(); acquire(&process->lock);
+  if(process->syscalltotrack==process->trapframe->a7)  
+    process->arg_cnt=3;
+
+
+ 
+  release(&process->lock);
+
+
+  //!
   argaddr(1, &p);
   argint(2, &n);
   if(argfd(0, 0, &f) < 0)
@@ -99,7 +130,14 @@ sys_close(void)
 {
   int fd;
   struct file *f;
-
+  //! EXTRA
+  struct proc *process = myproc();acquire(&process->lock);
+  if(process->syscalltotrack==process->trapframe->a7)
+    process->arg_cnt=1;
+  
+  release(&process->lock);
+     
+  //!
   if(argfd(0, &fd, &f) < 0)
     return -1;
   myproc()->ofile[fd] = 0;
@@ -112,7 +150,13 @@ sys_fstat(void)
 {
   struct file *f;
   uint64 st; // user pointer to struct stat
-
+  //! EXTRA
+  struct proc *process = myproc();acquire(&process->lock); 
+  if(process->syscalltotrack==process->trapframe->a7)
+      process->arg_cnt=2;
+  
+  release(&process->lock);
+  //!
   argaddr(1, &st);
   if(argfd(0, 0, &f) < 0)
     return -1;
@@ -126,6 +170,15 @@ sys_link(void)
   char name[DIRSIZ], new[MAXPATH], old[MAXPATH];
   struct inode *dp, *ip;
 
+    //! EXTRA
+  struct proc *process = myproc();
+  acquire(&process->lock); 
+  if(process->syscalltotrack==process->trapframe->a7)
+     process->arg_cnt=1;
+ 
+  release(&process->lock);
+  //!
+
   if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
     return -1;
 
@@ -193,6 +246,15 @@ sys_unlink(void)
   char name[DIRSIZ], path[MAXPATH];
   uint off;
 
+    //! EXTRA
+  struct proc *process = myproc();
+  acquire(&process->lock); 
+  if(process->syscalltotrack==process->trapframe->a7)
+      process->arg_cnt=1;
+  
+   release(&process->lock);
+  //!
+
   if(argstr(0, path, MAXPATH) < 0)
     return -1;
 
@@ -311,9 +373,20 @@ sys_open(void)
   int n;
 
   argint(1, &omode);
+
+
   if((n = argstr(0, path, MAXPATH)) < 0)
     return -1;
 
+  //! EXTRA
+  struct proc *process = myproc(); acquire(&process->lock); 
+  if(process->syscalltotrack==process->trapframe->a7)
+     process->arg_cnt=2;
+ 
+  release(&process->lock);
+  //!
+  
+
   begin_op();
 
   if(omode & O_CREATE){
@@ -375,7 +448,14 @@ sys_mkdir(void)
 {
   char path[MAXPATH];
   struct inode *ip;
-
+  //! EXTRA
+  struct proc *process = myproc();
+   acquire(&process->lock); 
+  if(process->syscalltotrack==process->trapframe->a7)
+    process->arg_cnt=1;
+ 
+ release(&process->lock);
+  //!
   begin_op();
   if(argstr(0, path, MAXPATH) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
     end_op();
@@ -393,6 +473,16 @@ sys_mknod(void)
   char path[MAXPATH];
   int major, minor;
 
+  //! EXTRA
+  struct proc *process = myproc();
+  acquire(&process->lock); 
+  if(process->syscalltotrack==process->trapframe->a7)process->arg_cnt=3;
+ 
+ 
+  
+  release(&process->lock); 
+  //!
+
   begin_op();
   argint(1, &major);
   argint(2, &minor);
@@ -412,7 +502,13 @@ sys_chdir(void)
   char path[MAXPATH];
   struct inode *ip;
   struct proc *p = myproc();
-  
+    //! EXTRA 
+  acquire(&p->lock); 
+  if(p->syscalltotrack==p->trapframe->a7)
+    p->arg_cnt=1;
+
+  release(&p->lock);
+  //!
   begin_op();
   if(argstr(0, path, MAXPATH) < 0 || (ip = namei(path)) == 0){
     end_op();
@@ -437,7 +533,14 @@ sys_exec(void)
   char path[MAXPATH], *argv[MAXARG];
   int i;
   uint64 uargv, uarg;
-
+    //! EXTRA
+  struct proc *process = myproc();
+  acquire(&process->lock); 
+  if(process->syscalltotrack==process->trapframe->a7)
+       process->arg_cnt=2;
+
+  release(&process->lock);
+  //!
   argaddr(1, &uargv);
   if(argstr(0, path, MAXPATH) < 0) {
     return -1;
@@ -481,6 +584,13 @@ sys_pipe(void)
   struct file *rf, *wf;
   int fd0, fd1;
   struct proc *p = myproc();
+  acquire(&p->lock);
+    //! EXTRA
+  if(p->syscalltotrack==p->trapframe->a7)
+     p->arg_cnt=0;
+ 
+  release(&p->lock);
+  //!
 
   argaddr(0, &fdarray);
   if(pipealloc(&rf, &wf) < 0)
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..5994d6a 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,12 +5,22 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
-
+#include "syscall.h"
+extern struct syscall_stat* returnpointer() ; 
 uint64
 sys_exit(void)
 {
   int n;
   argint(0, &n);
+
+    //! EXTRA
+  struct proc *process = myproc();    acquire(&process->lock);
+  if(process->syscalltotrack==process->trapframe->a7)
+       process->arg_cnt=1;
+
+  
+   release(&process->lock);
+  //!
   exit(n);
   return 0;  // not reached
 }
@@ -18,6 +28,13 @@ sys_exit(void)
 uint64
 sys_getpid(void)
 {
+    //! EXTRA
+  struct proc *process = myproc(); acquire(&process->lock);
+  if(process->syscalltotrack==process->trapframe->a7)
+    process->arg_cnt=0;
+ 
+   release(&process->lock); 
+  //!
   return myproc()->pid;
 }
 
@@ -32,6 +49,16 @@ sys_wait(void)
 {
   uint64 p;
   argaddr(0, &p);
+    //! EXTRA
+  struct proc *process = myproc(); 
+  acquire(&process->lock); 
+  if(process->syscalltotrack==process->trapframe->a7)
+     process->arg_cnt=1;
+
+  
+  
+  release(&process->lock);
+  //!
   return wait(p);
 }
 
@@ -40,9 +67,20 @@ sys_sbrk(void)
 {
   uint64 addr;
   int n;
-
+  
+  //! EXTRA
+  struct proc *process = myproc();
+  acquire(&process->lock);
+  if(process->syscalltotrack==process->trapframe->a7)
+    process->arg_cnt=1;
+  
+  release(&process->lock);
+  //!
   argint(0, &n);
   addr = myproc()->sz;
+ 
+
+
   if(growproc(n) < 0)
     return -1;
   return addr;
@@ -65,6 +103,16 @@ sys_sleep(void)
     sleep(&ticks, &tickslock);
   }
   release(&tickslock);
+    //! EXTRA
+  struct proc *process = myproc();
+    acquire(&process->lock); 
+  if(process->syscalltotrack==process->trapframe->a7)
+     process->arg_cnt=1;
+
+
+    release(&process->lock);
+
+  //!
   return 0;
 }
 
@@ -72,7 +120,15 @@ uint64
 sys_kill(void)
 {
   int pid;
-
+  //! EXTRA
+  struct proc *process = myproc();
+  acquire(&process->lock); 
+  if(process->syscalltotrack==process->trapframe->a7)
+       process->arg_cnt=1;
+    
+   
+   release(&process->lock);
+  //!
   argint(0, &pid);
   return kill(pid);
 }
@@ -87,5 +143,46 @@ sys_uptime(void)
   acquire(&tickslock);
   xticks = ticks;
   release(&tickslock);
+    //! EXTRA
+
+  struct proc *process = myproc();
+    acquire(&process->lock); 
+  if(process->syscalltotrack==process->trapframe->a7)
+     process->arg_cnt=0;
+ release(&process->lock);
+
+  //!
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  int n ; 
+  argint(0,&n) ; 
+  return trace(n) ;
+}
+
+void
+sys_exitfile(void)
+{
+ 
+  return exitfile() ;
+}
+
+
+uint64
+sys_history(void)
+{
+  int n ; 
+  uint64 hs ; 
+  
+  argaddr(1,&hs);
+  argint(0,&n) ; 
+  //printf("sysproc.c pid : %d\n",myproc()->pid) ;
+   
+  //printf("his : %d\n",historytrack[n].count);
+  return history(n , hs) ;
+}
+
+
diff --git a/user/exitfile.c b/user/exitfile.c
new file mode 100644
index 0000000..6460f92
--- /dev/null
+++ b/user/exitfile.c
@@ -0,0 +1,43 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/syscall_stat.h"
+#include "user/user.h"
+
+
+
+
+int main(int argc, char *argv[])
+{
+   
+    
+   // struct syscall_stat *history_struct = malloc(sizeof(*history_struct));
+    if(argc!=1)
+       {
+         
+       }
+    else 
+    {
+        //printf(argv[0]);
+        exitfile() ; 
+    }
+   
+
+    
+    int i;
+    char *nargv[MAXARG];
+    
+  
+
+   
+
+    for (i = 2; i < argc && i < MAXARG; i++)
+    {
+        nargv[i - 2] = argv[i];
+    }
+    exec(nargv[0], nargv);
+
+
+
+
+    exit(0);
+}
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..0368ce5
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,54 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/syscall_stat.h"
+#include "user/user.h"
+
+
+
+
+int main(int argc, char *argv[])
+{
+    struct syscall_stat one ; 
+    
+   // struct syscall_stat *history_struct = malloc(sizeof(*history_struct));
+    if(argc!=1)
+       {
+         history(atoi(argv[1]) ,&one);
+         printf("%d : \t",atoi(argv[1])) ; 
+          printf("syscall : %s, ",one.syscall_name) ; 
+               printf("# : %d,",one.count) ; 
+                printf("time : %d\n",one.accum_time) ; 
+       }
+    else 
+    {
+        for(int i=1 ; i<=23 ; i++)
+         {
+             history(i,&one);
+             printf("%d : \t",i) ; 
+              printf("syscall : %s, ",one.syscall_name) ; 
+               printf("# : %d,",one.count) ; 
+                printf("time : %d\n",one.accum_time) ; 
+
+         }  
+    }
+   
+
+    
+    int i;
+    char *nargv[MAXARG];
+    
+  
+
+   
+
+    for (i = 2; i < argc && i < MAXARG; i++)
+    {
+        nargv[i - 2] = argv[i];
+    }
+    exec(nargv[0], nargv);
+
+
+
+
+    exit(0);
+}
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..4a37079
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,29 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+ char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+
+  
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..d4ce133 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,6 @@
-struct stat;
 
+struct stat;
+struct syscall_stat;
 // system calls
 int fork(void);
 int exit(int) __attribute__((noreturn));
@@ -22,7 +23,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-
+int trace(int);
+int  history(int n , struct syscall_stat*);
+void  exitfile(void);
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..ebd4051 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("history");
+entry("exitfile");
