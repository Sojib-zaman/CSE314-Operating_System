diff --git a/Makefile b/Makefile
index 39a99d7..8c28f24 100644
--- a/Makefile
+++ b/Makefile
@@ -132,7 +132,10 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
+	$U/_threads\
+	$U/_malloctest\
+	$U/_prcn\
+	
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
 
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..5e331be 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,7 +106,12 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
-
+int             thread_create(void(*fcn)(void*), void *arg, void*stack);
+int             thread_join(int thread_id);
+void            thread_exit(void);
+void            Threadproc_freepagetable(pagetable_t, uint64);
+int             futex_sleep(uint64  , int  );
+int             futex_wakeup(uint64  , uint64);
 // swtch.S
 void            swtch(struct context*, struct context*);
 
@@ -165,6 +170,8 @@ void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64);
+int             growuvmmirror(pagetable_t, pagetable_t , uint64 , uint64);
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
@@ -173,7 +180,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
-
+void            thread_uvmfree(pagetable_t, uint64);
 // plic.c
 void            plicinit(void);
 void            plicinithart(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..3ef8f7d 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -13,7 +13,13 @@ struct proc proc[NPROC];
 struct proc *initproc;
 
 int nextpid = 1;
+int mempid = 1 ; 
 struct spinlock pid_lock;
+struct spinlock mid_lock;
+
+struct spinlock memlock[NPROC] ; 
+int refc[NPROC] ; 
+
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
@@ -29,40 +35,47 @@ struct spinlock wait_lock;
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
-void
-proc_mapstacks(pagetable_t kpgtbl)
+void proc_mapstacks(pagetable_t kpgtbl)
 {
   struct proc *p;
-  
-  for(p = proc; p < &proc[NPROC]; p++) {
+
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
     char *pa = kalloc();
-    if(pa == 0)
+    if (pa == 0)
       panic("kalloc");
-    uint64 va = KSTACK((int) (p - proc));
+    uint64 va = KSTACK((int)(p - proc));
     kvmmap(kpgtbl, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
   }
 }
 
 // initialize the proc table.
-void
-procinit(void)
+void procinit(void)
 {
   struct proc *p;
-  
+
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
-  for(p = proc; p < &proc[NPROC]; p++) {
-      initlock(&p->lock, "proc");
-      p->state = UNUSED;
-      p->kstack = KSTACK((int) (p - proc));
+  
+  
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    initlock(&p->lock, "proc");
+    p->state = UNUSED;
+    p->kstack = KSTACK((int)(p - proc));
+    
+    initlock(&memlock[p->mem_id] , "name") ; 
+    p->memlock = &memlock[p->mem_id] ; 
+
+    refc[p->mem_id] = 0 ; 
+    p->ref_count = &refc[p->mem_id]  ;
   }
 }
 
 // Must be called with interrupts disabled,
 // to prevent race with process being moved
 // to a different CPU.
-int
-cpuid()
+int cpuid()
 {
   int id = r_tp();
   return id;
@@ -70,7 +83,7 @@ cpuid()
 
 // Return this CPU's cpu struct.
 // Interrupts must be disabled.
-struct cpu*
+struct cpu *
 mycpu(void)
 {
   int id = cpuid();
@@ -79,7 +92,7 @@ mycpu(void)
 }
 
 // Return the current struct proc *, or zero if none.
-struct proc*
+struct proc *
 myproc(void)
 {
   push_off();
@@ -89,11 +102,10 @@ myproc(void)
   return p;
 }
 
-int
-allocpid()
+int allocpid()
 {
   int pid;
-  
+
   acquire(&pid_lock);
   pid = nextpid;
   nextpid = nextpid + 1;
@@ -102,31 +114,54 @@ allocpid()
   return pid;
 }
 
+int allocmid()
+{
+  int mid;
+
+  acquire(&mid_lock);
+  mid = mempid;
+  mempid = mempid + 1;
+  release(&mid_lock);
+
+  return mid;
+}
+
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
 // If there are no free procs, or a memory allocation fails, return 0.
-static struct proc*
+static struct proc *
 allocproc(void)
 {
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++) {
-    acquire(&p->lock);
-    if(p->state == UNUSED) {
+  for(int i =0 ; i<NPROC ; i++)
+  {
+    acquire(&proc[i].lock);
+    if (proc[i].state == UNUSED)
+    {
+      p=&proc[i];
+      p->memlock = &memlock[i] ; 
+      p->ref_count = &refc[i] ; 
       goto found;
-    } else {
-      release(&p->lock);
+    }
+    else
+    {
+      release(&proc[i].lock);
     }
   }
   return 0;
 
 found:
   p->pid = allocpid();
+  p->mem_id=allocmid() ; 
+  *p->ref_count = 1 ; 
+  
   p->state = USED;
 
   // Allocate a trapframe page.
-  if((p->trapframe = (struct trapframe *)kalloc()) == 0){
+  if ((p->trapframe = (struct trapframe *)kalloc()) == 0)
+  {
     freeproc(p);
     release(&p->lock);
     return 0;
@@ -134,7 +169,8 @@ found:
 
   // An empty user page table.
   p->pagetable = proc_pagetable(p);
-  if(p->pagetable == 0){
+  if (p->pagetable == 0)
+  {
     freeproc(p);
     release(&p->lock);
     return 0;
@@ -155,11 +191,29 @@ found:
 static void
 freeproc(struct proc *p)
 {
-  if(p->trapframe)
-    kfree((void*)p->trapframe);
+  if (p->trapframe)
+    kfree((void *)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  if (p->pagetable)
+  {
+
+    // For thread we dont want to erase physical memory 
+    // using a different function in threadproc_freetable 
+    // we are calling uvmunmap using do_free = 0  
+    // Threadproc_freepagetable => thread_uvmfree => uvmunmap with do_free = 0 
+    
+
+    //for process , ref count will be 0 , unless it becomes a thread and then ref_count++ ;
+    *p->ref_count-=1 ;
+    if(*p->ref_count>0)
+      Threadproc_freepagetable(p->pagetable , p->sz)  ; 
+    else 
+      proc_freepagetable(p->pagetable,p->sz) ; 
+      
+
+
+  }
+
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -180,23 +234,25 @@ proc_pagetable(struct proc *p)
 
   // An empty page table.
   pagetable = uvmcreate();
-  if(pagetable == 0)
+  if (pagetable == 0)
     return 0;
 
   // map the trampoline code (for system call return)
   // at the highest user virtual address.
   // only the supervisor uses it, on the way
   // to/from user space, so not PTE_U.
-  if(mappages(pagetable, TRAMPOLINE, PGSIZE,
-              (uint64)trampoline, PTE_R | PTE_X) < 0){
+  if (mappages(pagetable, TRAMPOLINE, PGSIZE,
+               (uint64)trampoline, PTE_R | PTE_X) < 0)
+  {
     uvmfree(pagetable, 0);
     return 0;
   }
 
   // map the trapframe page just below the trampoline page, for
   // trampoline.S.
-  if(mappages(pagetable, TRAPFRAME, PGSIZE,
-              (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
+  if (mappages(pagetable, TRAPFRAME, PGSIZE,
+               (uint64)(p->trapframe), PTE_R | PTE_W) < 0)
+  {
     uvmunmap(pagetable, TRAMPOLINE, 1, 0);
     uvmfree(pagetable, 0);
     return 0;
@@ -207,44 +263,49 @@ proc_pagetable(struct proc *p)
 
 // Free a process's page table, and free the
 // physical memory it refers to.
-void
-proc_freepagetable(pagetable_t pagetable, uint64 sz)
+void proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
   uvmfree(pagetable, sz);
 }
 
+
+void Threadproc_freepagetable(pagetable_t pagetable, uint64 sz)
+{
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  thread_uvmfree(pagetable, sz);
+}
+
 // a user program that calls exec("/init")
 // assembled from ../user/initcode.S
 // od -t xC ../user/initcode
 uchar initcode[] = {
-  0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02,
-  0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x35, 0x02,
-  0x93, 0x08, 0x70, 0x00, 0x73, 0x00, 0x00, 0x00,
-  0x93, 0x08, 0x20, 0x00, 0x73, 0x00, 0x00, 0x00,
-  0xef, 0xf0, 0x9f, 0xff, 0x2f, 0x69, 0x6e, 0x69,
-  0x74, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
-  0x00, 0x00, 0x00, 0x00
-};
+    0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02,
+    0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x35, 0x02,
+    0x93, 0x08, 0x70, 0x00, 0x73, 0x00, 0x00, 0x00,
+    0x93, 0x08, 0x20, 0x00, 0x73, 0x00, 0x00, 0x00,
+    0xef, 0xf0, 0x9f, 0xff, 0x2f, 0x69, 0x6e, 0x69,
+    0x74, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00};
 
 // Set up first user process.
-void
-userinit(void)
+void userinit(void)
 {
   struct proc *p;
 
   p = allocproc();
   initproc = p;
-  
+
   // allocate one user page and copy initcode's instructions
   // and data into it.
   uvmfirst(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
 
   // prepare for the very first "return" from kernel to user.
-  p->trapframe->epc = 0;      // user program counter
-  p->trapframe->sp = PGSIZE;  // user stack pointer
+  p->trapframe->epc = 0;     // user program counter
+  p->trapframe->sp = PGSIZE; // user stack pointer
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
@@ -256,45 +317,80 @@ userinit(void)
 
 // Grow or shrink user memory by n bytes.
 // Return 0 on success, -1 on failure.
-int
-growproc(int n)
+int growproc(int n)
 {
+
   uint64 sz;
+  uint64 old_sz;
   struct proc *p = myproc();
-
+  struct proc *pp ; 
+  acquire(p->memlock);
   sz = p->sz;
-  if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+  old_sz = sz ; 
+  if (n > 0)
+  {
+    
+    //uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
+    if ((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0)
+    {
+      release(p->memlock) ;
       return -1;
     }
-  } else if(n < 0){
+  }
+  else if (n < 0)
+  {
+
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
   p->sz = sz;
+
+
+  for (pp = proc; pp < &proc[NPROC]; pp++)
+  {
+    if(pp->mem_id==p->mem_id && pp->pid!=p->pid)
+    {
+      if(n>=0)
+      {
+        growuvmmirror(p->pagetable , pp->pagetable , PGROUNDUP(old_sz) , sz) ; 
+      }
+      else if(n<0)
+      {
+          uvmunmap(pp->pagetable ,PGROUNDUP(sz), (PGROUNDUP(old_sz) - PGROUNDUP(sz)) / PGSIZE , 0 );
+      }
+
+      pp->sz = sz ; 
+    }
+  }
+
+  release(p->memlock);
   return 0;
 }
 
 // Create a new process, copying the parent.
 // Sets up child kernel stack to return as if from fork() system call.
-int
-fork(void)
+int fork(void)
 {
   int i, pid;
   struct proc *np;
   struct proc *p = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if ((np = allocproc()) == 0)
+  {
     return -1;
   }
 
   // Copy user memory from parent to child.
-  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
+  if (uvmcopy(p->pagetable, np->pagetable, p->sz) < 0)
+  {
     freeproc(np);
     release(&np->lock);
     return -1;
   }
   np->sz = p->sz;
+ 
+  initlock(&memlock[np->mem_id] , "name") ; 
+  np->memlock = &memlock[np->mem_id] ; 
 
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
@@ -303,8 +399,8 @@ fork(void)
   np->trapframe->a0 = 0;
 
   // increment reference counts on open file descriptors.
-  for(i = 0; i < NOFILE; i++)
-    if(p->ofile[i])
+  for (i = 0; i < NOFILE; i++)
+    if (p->ofile[i])
       np->ofile[i] = filedup(p->ofile[i]);
   np->cwd = idup(p->cwd);
 
@@ -327,13 +423,14 @@ fork(void)
 
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
-void
-reparent(struct proc *p)
+void reparent(struct proc *p)
 {
   struct proc *pp;
 
-  for(pp = proc; pp < &proc[NPROC]; pp++){
-    if(pp->parent == p){
+  for (pp = proc; pp < &proc[NPROC]; pp++)
+  {
+    if (pp->parent == p)
+    {
       pp->parent = initproc;
       wakeup(initproc);
     }
@@ -343,17 +440,18 @@ reparent(struct proc *p)
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait().
-void
-exit(int status)
+void exit(int status)
 {
   struct proc *p = myproc();
 
-  if(p == initproc)
+  if (p == initproc)
     panic("init exiting");
 
   // Close all open files.
-  for(int fd = 0; fd < NOFILE; fd++){
-    if(p->ofile[fd]){
+  for (int fd = 0; fd < NOFILE; fd++)
+  {
+    if (p->ofile[fd])
+    {
       struct file *f = p->ofile[fd];
       fileclose(f);
       p->ofile[fd] = 0;
@@ -372,7 +470,7 @@ exit(int status)
 
   // Parent might be sleeping in wait().
   wakeup(p->parent);
-  
+
   acquire(&p->lock);
 
   p->xstate = status;
@@ -387,8 +485,7 @@ exit(int status)
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
-int
-wait(uint64 addr)
+int wait(uint64 addr)
 {
   struct proc *pp;
   int havekids, pid;
@@ -396,20 +493,25 @@ wait(uint64 addr)
 
   acquire(&wait_lock);
 
-  for(;;){
+  for (;;)
+  {
     // Scan through table looking for exited children.
     havekids = 0;
-    for(pp = proc; pp < &proc[NPROC]; pp++){
-      if(pp->parent == p){
+    for (pp = proc; pp < &proc[NPROC]; pp++)
+    {
+      if (pp->parent == p)
+      {
         // make sure the child isn't still in exit() or swtch().
         acquire(&pp->lock);
 
         havekids = 1;
-        if(pp->state == ZOMBIE){
+        if (pp->state == ZOMBIE)
+        {
           // Found one.
           pid = pp->pid;
-          if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
-                                  sizeof(pp->xstate)) < 0) {
+          if (addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+                                   sizeof(pp->xstate)) < 0)
+          {
             release(&pp->lock);
             release(&wait_lock);
             return -1;
@@ -424,13 +526,14 @@ wait(uint64 addr)
     }
 
     // No point waiting if we don't have any children.
-    if(!havekids || killed(p)){
+    if (!havekids || killed(p))
+    {
       release(&wait_lock);
       return -1;
     }
-    
+
     // Wait for a child to exit.
-    sleep(p, &wait_lock);  //DOC: wait-sleep
+    sleep(p, &wait_lock); // DOC: wait-sleep
   }
 }
 
@@ -441,20 +544,22 @@ wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
-void
-scheduler(void)
+void scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
-  
+
   c->proc = 0;
-  for(;;){
+  for (;;)
+  {
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
-    for(p = proc; p < &proc[NPROC]; p++) {
+    for (p = proc; p < &proc[NPROC]; p++)
+    {
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
+      if (p->state == RUNNABLE)
+      {
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
@@ -478,19 +583,18 @@ scheduler(void)
 // be proc->intena and proc->noff, but that would
 // break in the few places where a lock is held but
 // there's no process.
-void
-sched(void)
+void sched(void)
 {
   int intena;
   struct proc *p = myproc();
 
-  if(!holding(&p->lock))
+  if (!holding(&p->lock))
     panic("sched p->lock");
-  if(mycpu()->noff != 1)
+  if (mycpu()->noff != 1)
     panic("sched locks");
-  if(p->state == RUNNING)
+  if (p->state == RUNNING)
     panic("sched running");
-  if(intr_get())
+  if (intr_get())
     panic("sched interruptible");
 
   intena = mycpu()->intena;
@@ -499,8 +603,7 @@ sched(void)
 }
 
 // Give up the CPU for one scheduling round.
-void
-yield(void)
+void yield(void)
 {
   struct proc *p = myproc();
   acquire(&p->lock);
@@ -511,15 +614,15 @@ yield(void)
 
 // A fork child's very first scheduling by scheduler()
 // will swtch to forkret.
-void
-forkret(void)
+void forkret(void)
 {
   static int first = 1;
 
   // Still holding p->lock from scheduler.
   release(&myproc()->lock);
 
-  if (first) {
+  if (first)
+  {
     // File system initialization must be run in the context of a
     // regular process (e.g., because it calls sleep), and thus cannot
     // be run from main().
@@ -532,11 +635,10 @@ forkret(void)
 
 // Atomically release lock and sleep on chan.
 // Reacquires lock when awakened.
-void
-sleep(void *chan, struct spinlock *lk)
+void sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
+
   // Must acquire p->lock in order to
   // change p->state and then call sched.
   // Once we hold p->lock, we can be
@@ -544,7 +646,7 @@ sleep(void *chan, struct spinlock *lk)
   // (wakeup locks p->lock),
   // so it's okay to release lk.
 
-  acquire(&p->lock);  //DOC: sleeplock1
+  acquire(&p->lock); // DOC: sleeplock1
   release(lk);
 
   // Go to sleep.
@@ -563,15 +665,17 @@ sleep(void *chan, struct spinlock *lk)
 
 // Wake up all processes sleeping on chan.
 // Must be called without any p->lock.
-void
-wakeup(void *chan)
+void wakeup(void *chan)
 {
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++) {
-    if(p != myproc()){
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    if (p != myproc())
+    {
       acquire(&p->lock);
-      if(p->state == SLEEPING && p->chan == chan) {
+      if (p->state == SLEEPING && p->chan == chan)
+      {
         p->state = RUNNABLE;
       }
       release(&p->lock);
@@ -582,16 +686,18 @@ wakeup(void *chan)
 // Kill the process with the given pid.
 // The victim won't exit until it tries to return
 // to user space (see usertrap() in trap.c).
-int
-kill(int pid)
+int kill(int pid)
 {
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++){
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
     acquire(&p->lock);
-    if(p->pid == pid){
+    if (p->pid == pid)
+    {
       p->killed = 1;
-      if(p->state == SLEEPING){
+      if (p->state == SLEEPING)
+      {
         // Wake process from sleep().
         p->state = RUNNABLE;
       }
@@ -603,19 +709,17 @@ kill(int pid)
   return -1;
 }
 
-void
-setkilled(struct proc *p)
+void setkilled(struct proc *p)
 {
   acquire(&p->lock);
   p->killed = 1;
   release(&p->lock);
 }
 
-int
-killed(struct proc *p)
+int killed(struct proc *p)
 {
   int k;
-  
+
   acquire(&p->lock);
   k = p->killed;
   release(&p->lock);
@@ -625,13 +729,15 @@ killed(struct proc *p)
 // Copy to either a user address, or kernel address,
 // depending on usr_dst.
 // Returns 0 on success, -1 on error.
-int
-either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
+int either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
 {
   struct proc *p = myproc();
-  if(user_dst){
+  if (user_dst)
+  {
     return copyout(p->pagetable, dst, src, len);
-  } else {
+  }
+  else
+  {
     memmove((char *)dst, src, len);
     return 0;
   }
@@ -640,40 +746,245 @@ either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
 // Copy from either a user address, or kernel address,
 // depending on usr_src.
 // Returns 0 on success, -1 on error.
-int
-either_copyin(void *dst, int user_src, uint64 src, uint64 len)
+int either_copyin(void *dst, int user_src, uint64 src, uint64 len)
 {
   struct proc *p = myproc();
-  if(user_src){
+  if (user_src)
+  {
     return copyin(p->pagetable, dst, src, len);
-  } else {
-    memmove(dst, (char*)src, len);
+  }
+  else
+  {
+    memmove(dst, (char *)src, len);
     return 0;
   }
 }
 
+void thread_exit(void)
+{
+  struct proc *p = myproc();
+
+  if (p == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for (int fd = 0; fd < NOFILE; fd++)
+  {
+    if (p->ofile[fd])
+    {
+      struct file *f = p->ofile[fd];
+      fileclose(f);
+      p->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(p->cwd);
+  end_op();
+  p->cwd = 0;
+
+  acquire(&wait_lock);
+
+  // Give any children to init.
+  reparent(p);
+
+  // Parent might be sleeping in wait().
+  wakeup(p->parent);
+
+  acquire(&p->lock);
+
+  //p->xstate = status;
+  p->state = ZOMBIE;
+
+  release(&wait_lock);
+
+  // Jump into the scheduler, never to return.
+  sched();
+  panic("zombie exit");
+}
+
+int thread_join(int thread_id)
+{
+
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for (;;)
+  {
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for (pp = proc; pp < &proc[NPROC]; pp++)
+    {
+      if (pp->parent == p && pp->pid == thread_id)
+      {
+        if(pp->is_thread==1)
+        {
+            // make sure the child isn't still in exit() or swtch().
+          acquire(&pp->lock);
+
+          havekids = 1;
+          if (pp->state == ZOMBIE)
+          {
+            // Found one.
+            pid = pp->pid;
+          
+            freeproc(pp);
+            release(&pp->lock);
+            release(&wait_lock);
+            return pid;
+          }
+          release(&pp->lock);
+        }
+        
+        
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if (!havekids || killed(p))
+    {
+      release(&wait_lock);
+      return -1;
+    }
+
+    // Wait for a child to exit.
+    sleep(p, &wait_lock); // DOC: wait-sleep
+  }
+}
+
+  
+
+
+int thread_create(void (*fcn)(void *), void *arg, void *stack)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if ((np = allocproc()) == 0)
+  {
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  // since memory access so add lock 
+
+  if (uvmmirror(p->pagetable, np->pagetable, p->sz) < 0)
+  {
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  // Cause fork to return 0 in the child.
+  np->trapframe->a0 =(uint64) arg;
+  //sets the program counter to the start of fcn
+  np->trapframe->epc =(uint64) fcn;
+  np->trapframe->sp = (uint64) stack + 4096;
+  np->is_thread = 1;
+  np->trapframe->sp -= np->trapframe->sp % 16; 
+  np->mem_id = p->mem_id ; 
+  np->memlock = p->memlock ; 
+  
+  np->trapframe->ra=0xffffffff;
+  np->ref_count = p->ref_count ; 
+  *np->ref_count+=1; 
+
+  // increment reference counts on open file descriptors.
+  for (i = 0; i < NOFILE; i++)
+    if (p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+
+int futex_sleep(uint64 virtual_addr ,  int value )
+{
+    struct proc *p = myproc() ; 
+    acquire(p->memlock) ; 
+    // finding the physical location 
+    uint64 virt_base = PGROUNDDOWN(virtual_addr) ; 
+    uint64 physical_addr = walkaddr(p->pagetable , virt_base)+virtual_addr-virt_base ; 
+
+    // this check is only to ensure that the value has not changed in the meanwhile 
+    if(__sync_bool_compare_and_swap((int*)physical_addr , value , value))
+      sleep((void*)physical_addr , p->memlock) ; 
+    release(p->memlock) ; 
+    return 0 ;
+}
+
+
+int futex_wakeup(uint64 virtual_addr , uint64 sleeping_threads )
+{
+    struct proc *p = myproc() ; 
+    acquire(p->memlock) ; 
+
+    uint64 virt_base = PGROUNDDOWN(virtual_addr) ; 
+    uint64 physical_addr = walkaddr(p->pagetable , virt_base)+virtual_addr-virt_base ; 
+    for(struct proc *pp = proc ; sleeping_threads>0 && pp<&proc[NPROC];++pp)
+    {
+      acquire(&pp->lock) ; 
+      if(pp->chan==(void*)physical_addr && pp->state == SLEEPING)
+      {
+        pp->state = RUNNABLE ; 
+        --sleeping_threads ; 
+      }
+      release(&pp->lock) ; 
+
+    }
+
+    release(p->memlock) ; 
+    return 0 ; 
+
+}
+
+
+
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
+void procdump(void)
 {
   static char *states[] = {
-  [UNUSED]    "unused",
-  [USED]      "used",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
-  };
+      [UNUSED] "unused",
+      [USED] "used",
+      [SLEEPING] "sleep ",
+      [RUNNABLE] "runble",
+      [RUNNING] "run   ",
+      [ZOMBIE] "zombie"};
   struct proc *p;
   char *state;
 
   printf("\n");
-  for(p = proc; p < &proc[NPROC]; p++){
-    if(p->state == UNUSED)
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    if (p->state == UNUSED)
       continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
       state = states[p->state];
     else
       state = "???";
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..27eb858 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  struct spinlock *memlock ; 
+  int* ref_count ; 
+  int is_thread;               // if it is thread
+  int mem_id;                  // Id of the physical memory the pagetable is pointing to
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ffa65b6 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,12 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_futex_sleep(void);
+extern uint64 sys_futex_wakeup(void);
+
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +132,11 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create]    sys_thread_create,
+[SYS_thread_join]   sys_thread_join,
+[SYS_thread_exit]   sys_thread_exit,
+[SYS_futex_sleep]   sys_futex_sleep,
+[SYS_futex_wakeup]   sys_futex_wakeup
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..4cccf99 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create   22
+#define SYS_thread_join  23
+#define SYS_thread_exit  24
+#define SYS_futex_sleep 25
+#define SYS_futex_wakeup  26
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..04749bb 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,57 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_thread_create(void)
+{
+   //read arguments here 
+   uint64 function ; 
+   uint64 argument ; 
+   uint64 stack_addr ; 
+
+   argaddr(0,&function) ; 
+   argaddr(1,&argument) ; 
+   argaddr(2,&stack_addr) ; 
+   return thread_create((void (*)(void *))function, (void *)argument, (void *)stack_addr) ; 
+}
+
+uint64
+sys_thread_join(void)
+{
+   //read arguments here 
+   int thread_id ; 
+   argint(0,&thread_id) ; 
+   return thread_join(thread_id) ; 
+ 
+}
+
+void
+sys_thread_exit(void)
+{
+   //read arguments here 
+   thread_exit() ; 
+ 
+}
+
+uint64
+sys_futex_sleep(void)
+{
+  uint64 virtual_addr ; 
+  int val ; 
+  argaddr(0,&virtual_addr) ; 
+  argint(1,&val) ; 
+
+  return futex_sleep(virtual_addr , val) ; 
+
+}
+uint64
+sys_futex_wakeup(void)
+{
+  uint64 virtual_addr ; 
+  uint64 val ; 
+  argaddr(0,&virtual_addr) ; 
+  argaddr(1,&val) ; 
+
+  return futex_wakeup(virtual_addr , val) ; 
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..1bc4735 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -296,6 +296,18 @@ uvmfree(pagetable_t pagetable, uint64 sz)
   freewalk(pagetable);
 }
 
+
+
+void
+thread_uvmfree(pagetable_t pagetable, uint64 sz)
+{
+  if(sz > 0)
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
+  freewalk(pagetable);
+}
+
+
+
 // Given a parent process's page table, copy
 // its memory into a child's page table.
 // Copies both the page table and the
@@ -315,11 +327,11 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
-    pa = PTE2PA(*pte);
+    pa = PTE2PA(*pte); //gets the physical address 
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
+    if((mem = kalloc()) == 0) // allocate new memory 
       goto err;
-    memmove(mem, (char*)pa, PGSIZE);
+    memmove(mem, (char*)pa, PGSIZE); // that new memory will also point to the same physical address 
     if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
       kfree(mem);
       goto err;
@@ -332,6 +344,66 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  //char* mem; 
+  // no need to kalloc and then map the new memory
+  // since everyone will share the same memory except TF and TP 
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);//gets the physical address of the pagetable 
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0) // mapping size to that physical address 
+    {
+      //kfree(mem) ; 
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+int
+growuvmmirror(pagetable_t old, pagetable_t new, uint64 old_sz , uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  //char* mem; 
+  // no need to kalloc and then map the new memory
+  // since everyone will share the same memory except TF and TP 
+  for(i = old_sz; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);//gets the physical address of the pagetable 
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0) // mapping size to that physical address 
+    {
+      //kfree(mem) ; 
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+
+
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/conditional_variable.h b/user/conditional_variable.h
new file mode 100644
index 0000000..3ede596
--- /dev/null
+++ b/user/conditional_variable.h
@@ -0,0 +1,53 @@
+
+struct conditional_variable 
+{
+     unsigned int count ;  // wait-wakeup pair 
+     unsigned int prev_count ; 
+
+}; 
+
+
+void pthread_cond_init(struct conditional_variable *cvar)
+{
+    cvar->count = 0 ; 
+    cvar->prev_count  = 0 ; 
+}
+// When invoked, pthread_cond_wait() unlocks the mutex and then pauses the execution of its thread
+void pthread_cond_wait(struct conditional_variable *cvar , struct thread_mutex *m)
+{
+    __sync_synchronize() ; 
+    
+
+    // maintaining atomicity , fetching the value of count , no instruction to only fetch , so adding 0 :) 
+    unsigned int value =  __sync_fetch_and_add(&cvar->count , 0) ; 
+
+
+    // atomic swap , compare is not needed though 
+    //if the current value of cvar prev count is prev count, then write value into prev_count.
+    __sync_bool_compare_and_swap(&cvar->prev_count , cvar->prev_count , value) ; 
+    
+    thread_mutex_unlock(m) ; 
+    //This operation puts the calling thread to sleep, if and only if the value at address is equal to val. I
+    futex_sleep(&cvar->count , value)  ; 
+    thread_mutex_lock(m) ; 
+
+}
+
+void pthread_cond_signal(struct conditional_variable *cvar )
+{
+    __sync_synchronize() ; 
+    unsigned int value =  __sync_fetch_and_add(&cvar->prev_count , 0)+1 ; 
+    // __sync_bool_compare_and_swap (type *ptr, type oldval, type newval, ...)
+    __sync_bool_compare_and_swap(&cvar->count , cvar->prev_count , value) ; 
+    futex_wakeup(&cvar->count ,1) ; 
+
+}
+
+void pthread_cond_broadcast(struct conditional_variable *cvar )
+{
+    __sync_synchronize() ; 
+    unsigned int value =  __sync_fetch_and_add(&cvar->prev_count , 0)+1 ; 
+    // __sync_bool_compare_and_swap (type *ptr, type oldval, type newval, ...)
+    __sync_bool_compare_and_swap(&cvar->count , cvar->prev_count , value) ; 
+    futex_wakeup(&cvar->count ,(unsigned long long)-1) ; 
+}
\ No newline at end of file
diff --git a/user/counting_semaphore.h b/user/counting_semaphore.h
new file mode 100644
index 0000000..3251f3e
--- /dev/null
+++ b/user/counting_semaphore.h
@@ -0,0 +1,36 @@
+
+typedef struct counting_semaphore 
+{
+    int count ; 
+    struct thread_mutex m ; 
+    struct conditional_variable cv ; 
+}semaphore;
+
+int sem_init(semaphore *s , int pshared , int value)
+{
+    if(pshared){
+        return -1 ; 
+    }
+    s->count = value ; 
+    thread_mutex_init(&s->m) ; 
+    pthread_cond_init(&s->cv) ; 
+    return 0 ; 
+}
+void sem_post(semaphore *s)
+{
+    thread_mutex_lock(&s->m) ; 
+    s->count++ ; 
+    pthread_cond_signal(&s->cv) ; 
+    thread_mutex_unlock(&s->m) ; 
+}
+void sem_wait(semaphore *s)
+{
+    thread_mutex_lock(&s->m) ; 
+    while (s->count==0)
+    {
+        pthread_cond_wait(&s->cv,&s->m) ; 
+    }
+    
+    s->count--  ; 
+    thread_mutex_unlock(&s->m) ; 
+}
diff --git a/user/malloctest.c b/user/malloctest.c
new file mode 100644
index 0000000..17fc94d
--- /dev/null
+++ b/user/malloctest.c
@@ -0,0 +1,162 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/thread_mutex.h"
+
+
+struct balance {
+  char name[32];
+  int amount;
+};
+
+struct thread_mutex mutex;
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay(unsigned int d) {
+  unsigned int i;
+  for (i = 0; i < d; i++) {
+    __asm volatile("nop" :::);
+  }
+
+  return i;
+}
+
+volatile int _tid = 0;
+int *x[2];
+volatile int locked = 0;
+int n = 10000;
+
+int *smem;
+
+void do_work(void *arg) {
+  int i;
+  int old;
+  int tid;
+  tid = _tid++;
+  // printf("&tid: %p\n", &tid);
+
+  while (locked) {
+  }
+  locked = 1;
+  thread_mutex_lock(&mutex);
+  printf("thread %d started\n", tid);
+  thread_mutex_unlock(&mutex);
+  locked = 0;
+
+  struct balance *b = (struct balance *)arg;
+  // printf( "Starting do_work: s:%s\n", b->name);
+  x[tid] = malloc(sizeof(int) * n);
+
+  while (locked) {
+  }
+  locked = 1;
+  thread_mutex_lock(&mutex);
+  printf("thread %d malloced %p\n", tid, x[tid]);
+  thread_mutex_unlock(&mutex);
+  locked = 0;
+
+  for (int i = 0; i < n; i++) {
+    x[tid][i] = i;
+  }
+
+  for (i = 0; i < b->amount; i++) {
+    // lock and mlock will be implemented by you.
+    // thread_spin_lock(&lock);
+    // thread_mutex_lock(&mlock);
+    old = total_balance;
+    delay(100000);
+    // if(old != total_balance)  printf("we will miss an update. old: %d
+    // total_balance: %d\n", old, total_balance);
+    total_balance = old + 1;
+    // thread_spin_unlock(&lock);
+    //  thread_mutex_lock(&mlock);
+  }
+
+  for (int i = 0; i < n; i++) {
+    while (locked) {
+    }
+    locked = 1;
+    smem[i]++;
+    locked = 0;
+  }
+
+  // printf( "Done s:%x\n", b->name);
+
+  thread_exit();
+  return;
+}
+
+void empty_task() {
+  int tid;
+  tid = _tid++;
+  // printf("&tid: %p\n", &tid);
+
+  while (locked) {
+  }
+  locked = 1;
+  thread_mutex_lock(&mutex);
+  printf("thread %d started\n", tid);
+  thread_mutex_unlock(&mutex);
+  locked = 0;
+
+  // printf( "Starting do_work: s:%s\n", b->name);
+
+  for (int i = 0; i < n; i++) {
+    while (locked) {
+    }
+    locked = 1;
+    smem[i]++;
+    locked = 0;
+  }
+
+  int *x = (int*)malloc(sizeof(int)*n);
+  int i = 0;
+  while(1){
+    x[i]++;
+    i = (i + 1) % n;
+  }
+  // printf("hi from thread3\n");
+  // printf( "Done s:%x\n", b->name);
+  thread_exit();
+  return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+
+  int thread1, thread2, r1, r2;
+  void *stack1, *stack2, *stack3;
+
+  smem = malloc(sizeof(int) * n);
+  stack1 = malloc(4096);
+  stack2 = malloc(4096);
+  stack3 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void *)&b1, stack1);
+  thread2 = thread_create(do_work, (void *)&b2, stack2);
+  thread_create(empty_task, 0, stack3);
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", thread1, r1,
+         thread2, r2, total_balance);
+  printf("Thread 1 malloced: %p\n", x[0]);
+  printf("Thread 2 malloced: %p\n", x[1]);
+  for (int i = 0; i < n; i++) {
+    if (x[0][i] != i || x[1][i] != i) {
+      printf("Doesn't match\n");
+      printf("%d vs %d for %d\n", x[0][i], x[0][i], i);
+      return 0;
+    }
+    if (smem[i] != 3) {
+      printf("is't 3\n");
+      return 0;
+    }
+  }
+  printf("Match\n");
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/prcn.c b/user/prcn.c
new file mode 100644
index 0000000..8adbf57
--- /dev/null
+++ b/user/prcn.c
@@ -0,0 +1,147 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "thread_mutex.h"
+#include "thread_spinlock.h"
+#include "conditional_variable.h"
+#include "counting_semaphore.h"
+
+struct queue{
+	int arr[16];
+	int front;
+	int rear;
+	int size;
+
+};
+void queue_init(struct queue* q)
+{
+    q->front = 0;
+	q->rear = 0;
+	q->size = 0;
+
+}
+void queue_push(struct queue* q,int x)
+{
+		q->arr[q->rear] = x;
+		q->rear = (q->rear+1)%16;
+		q->size++;
+}
+int queue_front(struct queue* q)
+{
+		if(q->size==0)
+			return -1;
+		return q->arr[q->front];
+}
+void queue_pop(struct queue* q)
+{
+		q->front = (q->front+1)%16;
+		q->size--;
+}
+
+struct queue q;
+// a mutex object lock
+struct thread_mutex mtx;
+// a semaphore object empty
+struct counting_semaphore empty;
+// a semaphore object full
+struct counting_semaphore full;
+
+struct thread_mutex print_lock;
+
+void init_semaphore()
+{
+	// initialize mutex lock
+    thread_mutex_init(&mtx);
+	// initialize semaphore empty with 5
+    sem_init(&empty,0,5);
+	// initialize semaphore full with 0
+    sem_init(&full,0,0);
+
+    thread_mutex_init(&print_lock);
+
+}
+
+void  ProducerFunc(void * arg)
+{
+    thread_mutex_lock(&print_lock);
+	printf("%s\n",(char*)arg);
+    thread_mutex_unlock(&print_lock);
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore empty
+        sem_wait(&empty);
+
+		// wait for mutex lock
+        thread_mutex_lock(&mtx);
+
+		sleep(1);
+		queue_push(&q,i);
+        thread_mutex_lock(&print_lock);
+		printf("producer produced item %d\n",i);
+		thread_mutex_unlock(&print_lock);
+		// unlock mutex lock
+        thread_mutex_unlock(&mtx);
+		// post semaphore full
+        sem_post(&full);
+	}
+    thread_exit();
+    return;
+}
+
+void  ConsumerFunc(void * arg)
+{
+    thread_mutex_lock(&print_lock);
+	printf("%s\n",(char*)arg);
+    thread_mutex_unlock(&print_lock);
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore full
+        sem_wait(&full);
+		// wait for mutex lock
+        thread_mutex_lock(&mtx);
+
+
+		sleep(1);
+		int item = queue_front(&q);
+		queue_pop(&q);
+        thread_mutex_lock(&print_lock);
+		printf("consumer consumed item %d\n",item);
+        thread_mutex_unlock(&print_lock);
+
+
+		// unlock mutex lock
+        thread_mutex_unlock(&mtx);
+		// post semaphore empty
+        sem_post(&empty);
+	}
+    thread_exit();
+    return;
+}
+
+int main(void)
+{
+
+	init_semaphore();
+
+	char * message1 = "i am producer";
+	char * message2 = "i am consumer";
+
+
+	void *s1, *s2;
+	int thread1, thread2, r1, r2;
+
+	s1 = malloc(4096);
+	s2 = malloc(4096);
+
+	thread1 = thread_create(ProducerFunc, (void*)message1, s1);
+	thread2 = thread_create(ConsumerFunc, (void*)message2, s2);
+
+	r1 = thread_join(thread1);
+	r2 = thread_join(thread2);
+
+	printf("Threads finished: (%d):%d, (%d):%d\n",
+      thread1, r1, thread2, r2);
+	exit(0);
+}
diff --git a/user/thread_mutex.h b/user/thread_mutex.h
new file mode 100644
index 0000000..d7d3bbe
--- /dev/null
+++ b/user/thread_mutex.h
@@ -0,0 +1,92 @@
+// Mutual exclusion spin locks.
+
+
+
+#include "kernel/types.h"
+#include "user/user.h"
+
+
+
+// Mutual exclusion lock.
+struct thread_mutex {
+  uint8 locked;       // Is the lock held?
+
+  // For debugging:
+  char *name;        // Name of lock.
+  int pid;   // The cpu holding the lock.
+};
+
+
+
+
+
+
+void thread_mutex_init(struct thread_mutex *m)
+{
+  
+  m->locked = 0;
+  m->pid = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void thread_mutex_lock(struct thread_mutex *m)
+{
+  
+
+
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &m->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  while(__sync_lock_test_and_set(&m->locked, 1) != 0)
+   {
+        sleep(1) ;
+   } 
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Record info about lock acquisition for holding() and debugging.
+  m->pid = getpid();
+}
+
+// Release the lock.
+  void thread_mutex_unlock(struct thread_mutex *m)
+{
+
+
+  m->pid = 0;
+
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to m->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &m->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&m->locked);
+
+
+}
+
+// Check whether this cpu is holding the lock.
+// Interrupts must be off.
+int
+holding_mutex(struct thread_mutex *m)
+{
+  int r;
+  r = (m->locked && m->pid == getpid());
+  return r;
+}
\ No newline at end of file
diff --git a/user/thread_spinlock.h b/user/thread_spinlock.h
new file mode 100644
index 0000000..571ef23
--- /dev/null
+++ b/user/thread_spinlock.h
@@ -0,0 +1,91 @@
+// Mutual exclusion spin locks.
+
+
+
+#include "kernel/types.h"
+#include "user/user.h"
+
+
+
+// Mutual exclusion lock.
+struct thread_spinlock {
+  uint8 locked;       // Is the lock held?
+
+  // For debugging:
+  char *name;        // Name of lock.
+  int pid;   // The cpu holding the lock.
+};
+
+
+
+
+
+
+void
+thread_spin_init(struct thread_spinlock *lk)
+{
+  
+  lk->locked = 0;
+  lk->pid = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void thread_spin_lock(struct thread_spinlock *lk)
+{
+  
+
+
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Record info about lock acquisition for holding() and debugging.
+  lk->pid = getpid();
+}
+
+// Release the lock.
+ void thread_spin_unlock(struct thread_spinlock *lk)
+{
+
+
+  lk->pid = 0;
+
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&lk->locked);
+
+
+}
+
+// Check whether this cpu is holding the lock.
+// Interrupts must be off.
+int
+holding_spinlock(struct thread_spinlock *lk)
+{
+  int r;
+  r = (lk->locked && lk->pid == getpid());
+  return r;
+}
\ No newline at end of file
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..505ff7e
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,77 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "thread_spinlock.h"
+#include "thread_mutex.h"
+
+struct thread_mutex print ; 
+struct thread_spinlock lock ; 
+struct thread_mutex mlock ; 
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i; 
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;   
+}
+
+void do_work(void *arg){
+    int i; 
+    int old;
+   
+    struct balance *b = (struct balance*) arg; 
+    thread_mutex_lock(&print) ; 
+    printf( "Starting do_work: s:%s\n", b->name);
+
+    for (i = 0; i < b->amount; i++) { 
+        // lock and mlock will be implemented by you.
+        thread_spin_lock(&lock);
+        thread_mutex_lock(&mlock);
+        
+         old = total_balance;
+         delay(100000);
+	     if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+        thread_spin_unlock(&lock);
+        thread_mutex_unlock(&mlock);
+       
+
+    }
+  
+    printf( "Done s:%x\n", b->name);
+    thread_mutex_unlock(&print) ; 
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+ 
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2); 
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+  
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..4c0ed43 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,12 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(int thread_id);
+void thread_exit(void);
+int futex_sleep(void*,int);
+int futex_wakeup(void*,unsigned long long);
+
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..1bcd7cd 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,8 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("futex_sleep");
+entry("futex_wakeup");
\ No newline at end of file
