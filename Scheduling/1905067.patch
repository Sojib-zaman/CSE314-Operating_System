diff --git a/Makefile b/Makefile
index 39a99d7..6978d95 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_dummyproc\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +155,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..18adc51 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             settickets(int);
+int             getpinfo(uint64);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..d539931 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,8 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define DEFAULT_TICKET_COUNT 10
+#define TIME_LIMIT_1 1
+#define TIME_LIMIT_2 2
+#define BOOST_INTERVAL 64
+
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..d063663 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,7 +5,8 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
-
+#include "pstat.h"
+#include "rand.h"
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
@@ -124,7 +125,13 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  //! initialize tickets 
+  p->current_tickets = DEFAULT_TICKET_COUNT ; 
+  p->original_tickets = DEFAULT_TICKET_COUNT;
+  p->current_queue = 1 ; 
+  p->time_slices = 0 ;  
 
+  
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
@@ -146,6 +153,8 @@ found:
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
 
+  //printf("Process created with queue %d and ticket %d  and pid %d \n" , p->current_queue , p->current_tickets , p->pid)   ; 
+
   return p;
 }
 
@@ -296,6 +305,11 @@ fork(void)
   }
   np->sz = p->sz;
 
+
+  np->original_tickets = np->current_tickets = p->original_tickets ; 
+  //printf("In fork , assigned tickets : %d\n" , np->original_tickets);  
+  np->time_slices = 0  ; 
+  np->current_queue = 1 ; 
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
@@ -433,7 +447,103 @@ wait(uint64 addr)
     sleep(p, &wait_lock);  //DOC: wait-sleep
   }
 }
+int settickets(int allowed_ticket_for_process)
+{
+  struct proc *p = myproc() ; 
+  acquire(&p->lock) ; 
+  if(allowed_ticket_for_process<1)
+  {
+    p->original_tickets = DEFAULT_TICKET_COUNT ; 
+    return -1 ; 
+    
+  }
+  else p->original_tickets = allowed_ticket_for_process ;
+  release(&p->lock) ; 
+  return 0 ; 
+}
 
+int getpinfo(uint64 addr)
+{
+ 
+  if(!addr)return -1 ; 
+  struct proc *p ; 
+  struct pstat pinstat ; 
+
+  for(p=proc ; p<&proc[NPROC] ; p++)
+  {
+    acquire(&p->lock) ; 
+    if(p->state == UNUSED) pinstat.inuse[p->pid] = 0 ; 
+    else 
+    {
+      pinstat.inuse[p->pid] = 1 ; 
+      pinstat.pid[p->pid] = p->pid ; 
+      pinstat.tickets_original[p->pid] = p->original_tickets ; 
+      pinstat.tickets_current[p->pid] = p->current_tickets ; 
+      pinstat.inQ[p->pid] = p->current_queue;
+      pinstat.time_slices[p->pid] = p->time_slices ; 
+    }
+  
+    release(&p->lock) ; 
+  }
+  p=myproc() ; 
+  acquire(&p->lock) ; 
+  if(copyout(p->pagetable , addr , (char*)&pinstat , sizeof(pinstat))<0)
+  {
+    release(&p->lock) ; 
+    return - 1 ; 
+  }
+  release(&p->lock) ; 
+  return 0 ; 
+}
+uint64 reset_tickets()
+{
+  struct proc *p ; 
+  int total = 0  ; 
+  for(p=proc ; p<&proc[NPROC] ; p++)
+  {
+    acquire(&p->lock) ; 
+    if(p->state==RUNNABLE)
+    {
+      
+      p->current_tickets = p->original_tickets ; 
+     
+      //printf("%d\n",p->original_tickets)  ; 
+      
+    }
+    
+    release(&p->lock) ; 
+  }
+  return total ; 
+}
+uint64 total_tickets()
+{
+  //printf("2.5\n") ; 
+  struct proc *p ; 
+  int total = 0  ; 
+    // printf("Init count : %d\n",total) ; 
+  for(p=proc ; p<&proc[NPROC] ; p++)
+  {
+    //printf("Process created with queue %d and ticket %d  and pid %d \n" , p->current_queue , p->current_tickets , p->pid)   ; 
+    acquire(&p->lock) ;  //printf("2.7\n") ; 
+   // if(p->state==RUNNABLE)printf("runnable\n") ; 
+    if(p->state==RUNNABLE && p->current_queue==1 && p->current_tickets!=0)
+    {
+      //printf("adding elements\n") ; 
+      total+=p->current_tickets ; 
+    }
+    else 
+    {
+      // if(p->state!=RUNNABLE) printf("%d\n",p->state)  ; 
+      //  if(p->current_queue!=1) printf("%d\n",p->current_queue)  ; 
+      //   if(p->current_tickets==0) printf("0\n")  ; 
+    }
+      
+    release(&p->lock) ; 
+  }
+  //  printf("last count : %d\n",total) ; 
+   // printf("2.8\n") ; 
+  return total ; 
+}
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -441,33 +551,176 @@ wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
-void
-scheduler(void)
+
+void increase_time_slice()
 {
-  struct proc *p;
-  struct cpu *c = mycpu();
-  
+  for (struct proc* p = proc; p < & proc[NPROC]; p++) 
+      {
+       
+        if(p->state==RUNNABLE)
+          p->time_slices++ ; 
+       
+      }
+}
+
+void
+scheduler(void) 
+{  
+  struct proc * process;
+  struct cpu * c = mycpu();
+
   c->proc = 0;
-  for(;;){
-    // Avoid deadlock by ensuring that devices can interrupt.
-    intr_on();
+  
+  uint64 start = 0 ; 
+
+  for (;;)
+  {
+  intr_on();
+    acquire(&tickslock) ; 
+  uint64 current = ticks ; 
+  release(&tickslock) ; 
+
+ //priority boosting 
+  if(current-start>64)
+  {
+    start=current ; 
+    reset_tickets() ; 
+     for (struct proc* p = proc; p < & proc[NPROC]; p++) 
+      {
+        acquire(&p->lock)  ; 
+        
+        p->current_queue = 1 ;
+        release(&p->lock) ; 
+      } 
 
-    for(p = proc; p < &proc[NPROC]; p++) {
-      acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+  }
+
+
+
+    process=0 ; 
+   
+    uint64 total_count = 0 ;
+   
+    // printf("Init count : %d\n",total) ; 
+    total_count = total_tickets() ; 
+    
+   
+    int running_queue = 2;
+    if (total_count > 0) 
+      running_queue = 1; // this mean lottery queue is not empty and will have high priority 
+
+    if (total_count == 0)
+    {
+      running_queue = 2 ; 
+      reset_tickets();
+    }
+   // printf("3\n") ;  
+  uint time_limit = 0 ; 
+
+    
+    uint64 random = rand(total_count);
+    
+
+    if (running_queue == 1) 
+    {
+      //printf(" process found in lottery\n") ; 
+      for (struct proc* p = proc; p < & proc[NPROC]; p++) 
+      {
+        acquire( & p -> lock); 
+        if (p -> current_queue == 1 && p->state==RUNNABLE) 
+        {
+
+          //printf("suitable proc found\n");
+          if (random < p->current_tickets) {
+            process= p; time_limit = TIME_LIMIT_1 ; 
+            release( &p -> lock);
+            break;
+          }
+          random = random - p->current_tickets ; 
+        }
+        release( &p -> lock);
       }
-      release(&p->lock);
+    } 
+   // printf("4\n") ; 
+
+
+    if(process==0)
+    {
+      
+      //printf("No process found in lottery\n") ; 
+      //since ticket count was zero , so now have to follow default round robin 
+      for (struct proc* p = proc; p < & proc[NPROC]; p++) {
+
+        acquire( & p -> lock);
+        if (p->state == RUNNABLE) {
+          process = p ; 
+          time_limit = TIME_LIMIT_2 ; 
+          release( & p -> lock);
+          break ; 
+        }
+        release(&p->lock) ; 
+
+        
+      }
+
     }
+   // printf("5\n") ; 
+
+
+    if(process)
+    {
+      acquire( & process -> lock);
+      uint64 start = process->time_slices  ; 
+      //printf("about to schedule first proc\n");
+      //printf("procid: %d, ticket: %d, name %s\n", process->pid, process->current_tickets, process->name);
+      while(process->state==RUNNABLE && (process->time_slices-start)<time_limit)
+      {
+        process->state = RUNNING ; 
+        c->proc = process ; 
+        //printf("scheduling first proc\n");
+        swtch( & c-> context, & process-> context);
+        process->time_slices++; 
+        if(process->current_queue==1)
+          process->current_tickets-- ; 
+        //printf("swch returned\n");
+      }
+
+
+      //since code running is finished , now we set cpu process back to 0 
+      c->proc = 0 ; 
+     // printf("6\n") ; 
+      //now check p state 
+      //printf("state %d, ticket: %d\n", process->state, process->current_tickets);
+        if(process->state==RUNNABLE)  // time slice is finished 
+        {
+         
+
+          if(process->current_queue==1){
+            // printf("switch runnable %d\n",process->pid) ; 
+              process->current_queue = 2 ;
+          }
+        } 
+        else if(process->state==SLEEPING)
+        {
+          
+         
+          if(process->current_queue==2)
+          {
+             // printf("sleep switch %d\n",process->pid); 
+              process->current_queue=1 ; 
+          }
+            
+
+          // printf("Entered Sleeping , so current queue : %d\n",process->current_queue) ; 
+        }
+     // printf("procid: %d, ticket: %d, name %s\n", process->pid, process->current_tickets, process->name);
+      release(&process->lock) ; 
+     // printf("7\n") ; 
+    }
+
+
+//printf("8\n") ; 
+
   }
 }
 
@@ -526,7 +779,7 @@ forkret(void)
     first = 0;
     fsinit(ROOTDEV);
   }
-
+ // printf("forkret about to about to return\n");
   usertrapret();
 }
 
@@ -572,6 +825,7 @@ wakeup(void *chan)
     if(p != myproc()){
       acquire(&p->lock);
       if(p->state == SLEEPING && p->chan == chan) {
+       // printf("wakeup\n");
         p->state = RUNNABLE;
       }
       release(&p->lock);
@@ -652,6 +906,17 @@ either_copyin(void *dst, int user_src, uint64 src, uint64 len)
   }
 }
 
+
+
+
+
+
+
+
+
+
+
+
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..cb4916f 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+
+  int current_queue ; 
+  int original_tickets ; 
+  int current_tickets ; 
+  int time_slices ; 
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..de941fd
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,12 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+struct pstat {
+int pid[NPROC]; // the process ID of each process
+int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+int inQ[NPROC]; // which queue the process is currently in
+int tickets_original[NPROC]; // the number of tickets each process originally had
+int tickets_current[NPROC]; // the number of tickets each process currently has
+int time_slices[NPROC]; // the number of time slices each process has been scheduled
+};
+#endif // _PSTAT_H_
diff --git a/kernel/rand.h b/kernel/rand.h
new file mode 100644
index 0000000..9072168
--- /dev/null
+++ b/kernel/rand.h
@@ -0,0 +1,14 @@
+#include "types.h"
+volatile  uint64 seed = 1;
+void srand(uint64 s) {
+    seed  =s ; 
+}
+uint64 rand(uint64 range) {
+  seed++;
+  uint64 d = 15485863;
+  uint64 a = seed * d ;
+  uint64 b = 2038074743 ;
+  uint64 r =  ((a * a * a % b) * range) / b;
+  return r ; 
+
+}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..2f3c7f7 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,7 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
-
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
@@ -126,6 +127,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets]   sys_settickets,
+[SYS_getpinfo]   sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..bee1422 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets  22
+#define SYS_getpinfo  23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..8f2b635 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,19 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_settickets(void)
+{
+  int allowed_ticket_for_process ; 
+  argint(0,&allowed_ticket_for_process) ;
+  return settickets(allowed_ticket_for_process) ; 
+}
+
+uint64
+sys_getpinfo(void) 
+{
+uint64 addr ;
+ argaddr(0, &addr);
+return getpinfo(addr);
+}
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..ecb2e14 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -8,7 +8,7 @@
 
 struct spinlock tickslock;
 uint ticks;
-
+extern struct proc proc[NPROC];
 extern char trampoline[], uservec[], userret[];
 
 // in kernelvec.S, calls kerneltrap().
@@ -167,6 +167,13 @@ clockintr()
   ticks++;
   wakeup(&ticks);
   release(&tickslock);
+  
+
+
+
+
+
+
 }
 
 // check if it's an external interrupt or software interrupt,
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..374ed48
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,32 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/pstat.h" 
+#include "user/user.h"
+int main(int argc , char *argv[])
+{
+    if(argc!=2)
+    {
+        printf("Invalid no. of arguments") ; 
+        exit(1) ; 
+    }
+    if(settickets(atoi(argv[1]))==-1)
+    {
+        printf("Invalid operation") ; 
+        exit(1) ; 
+    }
+    int pid = fork() ; 
+    if(pid<0)
+    {
+        //printf("Parent process %d is leaving ",getpid()) ; 
+        exit(1) ; 
+    }
+    else if(pid==0)
+    {
+        //printf("%d has initial tickets %d\n" , getpid() , atoi(argv[1])) ; 
+        int t=10000;
+        while(t) ; 
+    }
+   
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..da75031
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,32 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/pstat.h" 
+#include "user/user.h"
+int main(int argc , char *argv[])
+{
+    if(argc>1)
+    {
+        printf("Invalid no. of arguments") ; 
+        exit(1) ; 
+    }
+    struct pstat pinstat ; 
+    if(getpinfo(&pinstat)<0)
+        exit(1) ; 
+    else 
+    {
+
+
+
+        
+        printf("PID\t| In Use |  InQ   | Original Tickets | Current Tickets | Time Slices\n");
+        for(int i = 0 ; i< NPROC ; i++)
+        {
+           if(pinstat.inuse[i]==1)
+              printf("%d\t  %d\t   %d\t\t\t%d\t\t%d\t\t%d\n", pinstat.pid[i] , pinstat.inuse[i] , pinstat.inQ[i] , pinstat.tickets_original[i] , pinstat.tickets_current[i] , pinstat.time_slices[i]) ; 
+
+        
+        }
+    }
+    exit(0) ;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..2cb9e56 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int) ;
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
